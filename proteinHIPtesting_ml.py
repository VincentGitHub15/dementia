import csv
import numpy as np
from random import seed
from random import random
from random import randrange
from math import exp


# getting data from CSV
with open('HIPclean.csv') as f:
	array = csv.reader(f)
	data = []

	for row in array:
		row_list=[]
		for i in row:
			row_list.append(float(i))
		data.append(row_list)
	# print(data)


# # Load a CSV file
# def load_csv(filename):
# 	dataset = list()
# 	with open(filename, 'r') as file:
# 		csv_reader = reader(file)
# 		for row in csv_reader:
# 			if not row:
# 				continue
# 			dataset.append(row)
# 	return dataset

# # Convert string column to float
# def str_column_to_float(dataset, column):
# 	for row in dataset:
# 		row[column] = float(row[column].strip())

# # Convert string column to integer
# def str_column_to_int(dataset, column):
# 	class_values = [row[column] for row in dataset]
# 	unique = set(class_values)
# 	lookup = dict()
# 	for i, value in enumerate(unique):
# 		lookup[value] = i
# 	for row in dataset:
# 		row[column] = lookup[row[column]]
# 	return lookup

# # Find the min and max values for each column
# def dataset_minmax(dataset):
# 	minmax = list()
# 	stats = [[min(column), max(column)] for column in zip(*dataset)]
# 	return stats

# # Rescale dataset columns to the range 0-1
# def normalize_dataset(dataset, minmax):
# 	for row in dataset:
# 		for i in range(len(row)-1):
# 			row[i] = (row[i] - minmax[i][0]) / (minmax[i][1] - minmax[i][0])

# Split a dataset into k folds
def cross_validation_split(dataset, n_folds):
	dataset_split = list()
	dataset_copy = list(dataset)
	fold_size = int(len(dataset) / n_folds)
	for i in range(n_folds):
		fold = list()
		while len(fold) < fold_size:
			index = randrange(len(dataset_copy))
			fold.append(dataset_copy.pop(index))
		dataset_split.append(fold)
	# print("cross val split", dataset_split)
	return dataset_split

# Calculate accuracy percentage
def accuracy_metric(actual, predicted):
	correct = 0
	for i in range(len(actual)):
		if actual[i] == predicted[i]:
			correct += 1
	return correct / float(len(actual)) * 100.0

# Evaluate an algorithm using a cross validation split
# *args = learn rate, iterations, hidden neurons
def evaluate_algorithm(dataset, back_prop, n_folds, *args):
	folds = cross_validation_split(dataset, n_folds)
	scores = list()
	for fold in folds:
		train_set = list(folds)
		train_set.remove(fold)
		train_set = sum(train_set, [])
		test_set = list()
		for row in fold:
			row_copy = list(row)
			test_set.append(row_copy)
			row_copy[-1] = None
		predicted = back_prop(train_set, test_set, *args)
		# print("predicted", predicted)
		actual = [row[-1] for row in fold]
		accuracy = accuracy_metric(actual, predicted)
		scores.append(accuracy)
	return scores

# Calculate neuron activation for an input
def activate(weights, inputs):
	activation = weights[-1]
	for i in range(len(weights)-1):
		activation += weights[i] * inputs[i]
	return activation

# Transfer neuron activation
def transfer(activation):
	return 1.0 / (1.0 + exp(-activation))

# Forward propagate input to a network output
def forward_propagate(network, row):
	inputs = row
	for layer in network:
		new_inputs = []
		for neuron in layer:
			activation = activate(neuron['weights'], inputs)
			neuron['output'] = transfer(activation)
			new_inputs.append(neuron['output'])
		inputs = new_inputs
	return inputs

# Calculate the derivative of an neuron output
def transfer_derivative(output):
	return output * (1.0 - output)

# Backpropagate error and store in neurons
def backward_propagate_error(network, expected):
	for i in reversed(range(len(network))):
		layer = network[i]
		errors = list()
		if i != len(network)-1:
			for j in range(len(layer)):
				error = 0.0
				for neuron in network[i + 1]:
					error += (neuron['weights'][j] * neuron['delta'])
				errors.append(error)
		else:
			for j in range(len(layer)):
				neuron = layer[j]
				errors.append(expected[j] - neuron['output'])
		for j in range(len(layer)):
			neuron = layer[j]
			neuron['delta'] = errors[j] * transfer_derivative(neuron['output'])

# Update network weights with error
def update_weights(network, row, l_rate):
	for i in range(len(network)):
		inputs = row[:-1]
		if i != 0:
			inputs = [neuron['output'] for neuron in network[i - 1]]
		for neuron in network[i]:
			for j in range(len(inputs)):
				neuron['weights'][j] += l_rate * neuron['delta'] * inputs[j]
			neuron['weights'][-1] += l_rate * neuron['delta']

# Train a network for a fixed number of epochs
def train_network(network, train, l_rate, n_epoch, n_outputs):
	# print("in train network", train)
	for epoch in range(n_epoch):
		sum_error=0
		for row in train:
			outputs = forward_propagate(network, row)
			expected = [0 for i in range(n_outputs)]
			expected[row[-1]] = 1.0
			sum_error += sum([(expected[i]-outputs[i])**2 for i in range(len(expected))])
			backward_propagate_error(network, expected)
			update_weights(network, row, l_rate)
		# print('>epoch=%d, lrate=%.3f, error=%.3f' % (epoch, l_rate, sum_error))

# Initialize a network
def initialize_network(n_inputs, n_hidden, n_outputs):
	network = list()
	hidden_layer = [{'weights':[random() for i in range(n_inputs + 1)]} for i in range(n_hidden)]
	network.append(hidden_layer)
	output_layer = [{'weights':[random() for i in range(n_hidden + 1)]} for i in range(n_outputs)]
	network.append(output_layer)
	return network

# Make a prediction with a network
def predict(network, row):
	outputs = forward_propagate(network, row)
	return outputs.index(max(outputs))

# Backpropagation Algorithm With Stochastic Gradient Descent
def back_propagation(train, test, l_rate, n_epoch, n_hidden):
	# print("back prop fcn", test)
	# print("back prop fcn", train)
	n_inputs = len(train[0]) - 1
	n_outputs = len(set([row[-1] for row in train]))
	network = initialize_network(n_inputs, n_hidden, n_outputs)
	train_network(network, train, l_rate, n_epoch, n_outputs)
	predictions = list()
	for row in test:
		prediction = predict(network, row)
		predictions.append(prediction)
	return(predictions)


# Test Backprop on Seeds dataset
# seed(1)
# # load and prepare data
# filename = 'seeds_dataset.csv'
# dataset = load_csv(filename)
# for i in range(len(dataset[0])-1):
# 	str_column_to_float(dataset, i)
# # convert class column to integers
# str_column_to_int(dataset, len(dataset[0])-1)
# # normalize input variables
# minmax = dataset_minmax(dataset)
# normalize_dataset(dataset, minmax)
# evaluate algorithm
dataset=[[0.008143615, 0.028296878, 0.057176319, 0.010163658, 0.003586574, 0.00297937, 0.112439515, 0.075589468, 3.22502525, 0.44112808, 1.323222081, 1.0], [0.012698695, 0.021355793, 0.072214007, 0.007047494, 0.001403669, 0.0108757, 0.058110275, 0.064957706, 4.8762, 140.372895, 0.961786925, 1.0], [0.015679465, 0.026248221, 0.0339069, 0.004336665, 0.001876584, 0.005351668, 0.073793527, 0.066277378, 4.382319375, 383.439858, 1.13126885, 1.0], [0.006088868, 0.024605179, 0.034353304, 0.006264766, 0.002396565, 0.014193613, 0.072924125, 0.046017056, 5.3676, 226.321994, 1.39960115, 1.0], [0.001335102, 0.017860071, 0.059201408, 0.004368551, 0.00229303, 0.010830434, 0.089144502, 0.064296106, 2.350215, 228.448041, 1.170226975, 1.0], [0.005171897, 0.016716162, 0.050732286, 0.005239421, 0.003778619, 0.01338227, 0.055457425, 0.05130062, 2.243292375, 205.671818, 1.347625981, 1.0], [0.014301047, 0.014867698, 0.070355599, 0.005494148, 0.00211863, 0.00418366, 0.092764432, 0.053693913, 3.537489375, 0.35893475, 0.969221825, 1.0], [0.004137337, 0.015541195, 0.01247903, 0.014257981, 0.001757275, 0.012331144, 0.021788289, 0.044030356, 1.793604438, 198.699549, 1.224143919, 0.0], [0.001918448, 0.004685046, 0.000923, 0.003483425, 0.00118119, 0.010057143, 0.086935954, 0.054531317, 1.519767413, 0.09471279, 1.450882894, 0.0], [0.003888609, 0.015528014, 0.004352258, 0.004732261, 0.001262802, 0.009842538, 0.087082848, 0.035289413, 1.265236875, 0.18187569, 1.365374325, 0.0], [0.003007961, 0.014542253, 0.040856032, 0.006707435, 0.002338206, 0.006255884, 0.110437465, 0.051972894, 2.741326875, 0.5154227, 1.139435975, 1.0], [0.007718764, 0.033093677, 0.013571797, 0.003327451, 0.003172059, 0.003209362, 0.114813513, 0.045297815, 3.399519375, 397.73006, 1.255803425, 0.0], [0.003913671, 0.016167185, 0.054886476, 0.006200322, 0.001423739, 0.013063711, 0.060180973, 0.032180962, 2.283001875, 442.611716, 1.12330825, 0.0], [0.002141141, 0.011779696, 0.006621055, 0.007364469, 0.002086719, 0.002581922, 0.076116133, 0.031225794, 1.765378125, 2.85214144, 1.308748925, 0.0], [0.003580102, 0.002330291, 0.001033174, 0.004338696, 0.000812, 0.006257419, 0.033695406, 0.064057755, 1.15677665, 0.59365994, 1.039666875, 1.0], [0.001484442, 0.022273348, 0.002498394, 0.00232776, 0.00130086, 0.013221145, 0.009662196, 0.084226071, 2.288435625, 122.570778, 1.35439095, 0.0], [0.002782708, 0.012817818, 0.024933786, 0.006036266, 0.003233679, 0.013484292, 0.152302686, 0.051543768, 1.957685625, 134.499808, 1.10453325, 0.0], [0.012544017, 0.024168858, 0.071149582, 0.006798326, 0.001925273, 0.002040495, 0.068574103, 0.043791487, 5.162535, 0.24820851, 1.05609375, 1.0], [0.006662255, 0.020877754, 0.080845054, 0.005459164, 0.001333669, 0.007161183, 0.073461067, 0.048127861, 6.3707175, 103.063748, 1.1657022, 0.0], [0.006247339, 0.03949495, 0.072638375, 0.007755863, 0.000872, 0.015881048, 0.080506805, 0.042014513, 5.109596738, 54.8590122, 1.30794875, 1.0], [0.004985401, 0.023968354, 0.056230553, 0.015215951, 0.001821507, 0.015913722, 0.046876656, 0.036381456, 4.130671488, 0.82871173, 1.271698094, 1.0], [0.004695509, 0.012458259, 0.013063332, 0.003760104, 0.000673, 0.004357925, 0.075829486, 0.073188126, 3.272180625, 0.24899647, 1.332931125, 0.0], [0.001027015, 0.004327273, 0.055436012, 0.003996437, 0.000834, 0.015224133, 0.058852546, 0.072558841, 1.217986875, 0.34463376, 1.450800575, 0.0], [0.002203241, 0.025094793, 0.109128633, 0.005600489, 0.001536862, 0.007423774, 0.083334837, 0.053699284, 0.5877295, 342.181965, 1.547223975, 0.0], [0.00148164, 0.002052475, 0.00532672, 0.006305421, 0.00146096, 0.012540001, 0.046628504, 0.029981513, 0.016891875, 0.2460671, 1.44113145, 0.0], [0.010830327, 0.047189917, 0.058882895, 0.007453879, 0.001609156, 0.010666196, 0.074015279, 0.049940164, 4.250931425, 0.30750907, 1.225334863, 1.0], [0.002433578, 0.015074415, 0.00607589, 0.0042075, 0.00079, 0.006365995, 0.053147445, 0.049432499, 1.175225625, 0.92128696, 1.40005175, 1.0], [0.00276402, 0.015408972, 0.016656678, 0.004051677, 0.002122357, 0.004894935, 0.101491873, 0.036885644, 1.512826875, 161.278265, 1.214798825, 0.0], [0.009658278, 0.044048513, 0.046141482, 0.015895913, 0.001439365, 0.01812848, 0.071444555, 0.049343779, 4.87998, 122.469535, 0.9827586, 0.0], [0.002275345, 0.006337265, 0.009560492, 0.00170988, 0.001395431, 0.006445264, 0.066468945, 0.044726627, 2.751659675, 0.20151658, 1.468099344, 0.0], [0.018373273, 0.009472021, 0.010416983, 0.006187524, 0.001318141, 0.007285993, 0.047475067, 0.043614741, 1.8408301, 664.699666, 0.9546095, 1.0], [0.018362064, 0.035529399, 0.065544087, 0.014733668, 0.003234117, 0.007112914, 0.071474893, 0.055423878, 4.646900138, 94.1046379, 1.246207719, 1.0], [0.012485357, 0.031562332, 0.097794633, 0.010774682, 0.001680763, 0.013615436, 0.068717309, 0.035279988, 5.418748125, 383.904371, 1.011878625, 1.0], [0.002667804, 0.024963485, 0.003411585, 0.002697463, 0.00134503, 0.002444648, 0.043871608, 0.043619125, 2.005175275, 0.53429395, 0.906624875, 0.0], [0.000942, 0.011775368, 0.003494036, 0.002667731, 0.000628, 0.003621085, 0.072370921, 0.047820188, 1.141673913, 0.39563572, 1.457088338, 0.0], [0.004244512, 0.015186703, 0.025991443, 0.005392035, 0.001105422, 0.015383122, 0.05083485, 0.040412569, 1.457544375, 90.7844655, 1.29693945, 0.0], [0.005077988, 0.037351174, 0.054645875, 0.011886495, 0.003301288, 0.010511675, 0.092876808, 0.086800629, 2.403420588, 0.45511342, 1.430657744, 1.0], [0.005835073, 0.026494709, 0.047253097, 0.01447612, 0.001070202, 0.009017881, 0.072444246, 0.039611277, 3.722349225, 438.818786, 1.186075506, 1.0], [0.001772955, 0.010131464, 0.016405572, 0.013960313, 0.000836, 0.01277744, 0.105497945, 0.043079874, 1.178266625, 165.33782, 1.500024994, 1.0], [0.010791496, 0.019839119, 0.038885214, 0.014584363, 0.001444004, 0.016216201, 0.075951453, 0.029312226, 1.816171875, 129.829985, 1.13945475, 1.0], [0.001936268, 0.024225923, 0.026739534, 0.007771532, 0.001340408, 0.008958982, 0.077192293, 0.056346568, 2.619514125, 365.841696, 1.384545238, 1.0], [0.011439924, 0.036653661, 0.056921621, 0.010087572, 0.000888, 0.016030575, 0.049651978, 0.048178214, 4.712879325, 342.148288, 1.405919544, 0.0], [0.004846274, 0.017326196, 0.023798308, 0.003568105, 0.002107824, 0.009395815, 0.103415675, 0.047095842, 1.8612682, 0.30401637, 1.517763788, 0.0], [0.018495903, 0.047650746, 0.079400389, 0.01486462, 0.001834132, 0.021601872, 0.045959983, 0.06244904, 4.653770625, 6.48890545, 0.95726215, 1.0], [0.004579577, 0.029076792, 0.06242935, 0.00456641, 0.002315564, 0.004686696, 0.073614256, 0.031933323, 4.104279813, 0.46201363, 1.138855631, 0.0], [0.004507853, 0.029625884, 0.017859016, 0.008002997, 0.000823, 0.006942341, 0.031777812, 0.022512715, 2.25784125, 0.29412709, 1.4251727, 0.0], [0.013847252, 0.046357879, 0.10316788, 0.008246474, 0.003585379, 0.025295607, 0.075555774, 0.022857372, 4.9923316, 307.021281, 1.095898081, 1.0], [0.002451852, 0.003578947, 0.002372209, 0.005411928, 0.000518, 0.010916731, 0.073079863, 0.041385336, 0.938776213, 0.27624565, 1.59611535, 0.0], [0.003905008, 0.01314312, 0.012438961, 0.008040804, 0.0010348, 0.007813457, 0.045468901, 0.06420707, 0.746921838, 0.18277908, 1.281789775, 0.0], [0.002411261, 0.003158467, 0.010357474, 0.004387233, 0.001302408, 0.005796589, 0.038178549, 0.030051455, 2.094474375, 0.20572824, 1.423539275, 0.0], [0.006375889, 0.026055551, 0.025916628, 0.009596814, 0.001646478, 0.008975898, 0.0822643, 0.041019338, 3.595606875, 88.4619061, 1.34793235, 0.0], [0.002387424, 0.009798006, 0.001361011, 0.006602096, 0.003201493, 0.002409501, 0.057623293, 0.040768095, 0.879535325, 0.26478846, 1.420963044, 1.0], [0.005246101, 0.004857042, 0.020230352, 0.01088776, 0.002572833, 0.004118311, 0.091044586, 0.031450678, 0.913975525, 427.760421, 1.576830419, 0.0], [0.003159761, 0.028819715, 0.065555568, 0.005827696, 0.00135672, 0.007781965, 0.086829162, 0.056128904, 2.991524438, 362.066506, 1.344847113, 1.0], [0.00490422, 0.022381236, 0.055663848, 0.005140414, 0.00259488, 0.004791889, 0.051816759, 0.066364302, 3.23071875, 426.691104, 1.25097825, 1.0], [0.014945797, 0.021133117, 0.020398304, 0.012144783, 0.002271275, 0.00834414, 0.095721454, 0.046947199, 3.075472425, 435.066375, 1.444761025, 1.0], [0.004805638, 0.029068073, 0.062996926, 0.008703832, 0.002726953, 0.01773026, 0.126864028, 0.05115031, 4.3531425, 264.681996, 1.21117525, 0.0], [0.009679353, 0.027310452, 0.074141279, 0.011638767, 0.001233983, 0.018731072, 0.098598278, 0.03711616, 4.757520563, 498.862254, 1.240441044, 1.0], [0.011056065, 0.030856573, 0.1042295, 0.01385296, 0.001334802, 0.02532625, 0.121378067, 0.050051767, 4.541707788, 62.5029945, 1.348461731, 1.0], [0.002047206, 0.006492884, 0.000843, 0.005891372, 0.001476854, 0.021371367, 0.117920073, 0.037303343, 1.0484775, 163.082157, 1.3628397, 0.0], [0.002717146, 0.015329449, 0.002423354, 0.014682793, 0.002994717, 0.015394807, 0.078249752, 0.024006907, 0.6880553, 319.605104, 1.118505119, 0.0], [0.00310326, 0.03554397, 0.015933322, 0.010052285, 0.002781602, 0.010697005, 0.099576897, 0.028848724, 2.796675263, 350.160648, 1.367140744, 0.0], [0.003462913, 0.017382632, 0.045552262, 0.012354361, 0.00126282, 0.023438327, 0.113559227, 0.068740362, 6.44301, 154.094292, 1.2287862, 1.0], [0.002496548, 0.026111181, 0.011910095, 0.009736859, 0.001729663, 0.002754265, 0.05865994, 0.064946526, 2.54075625, 1.52564947, 1.483437, 0.0], [0.003491841, 0.025958229, 0.047639005, 0.009707966, 0.000586, 0.005756547, 0.114840348, 0.065140058, 1.805597563, 685.866383, 1.5112422, 0.0], [0.025366304, 0.032931208, 0.075880419, 0.015131476, 0.001314247, 0.016471599, 0.080644787, 0.075232256, 5.981239125, 7.63810923, 1.1475068, 1.0], [0.018919939, 0.03378586, 0.046105767, 0.011979019, 0.000932, 0.013018569, 0.11317248, 0.076092812, 5.091459825, 198.935871, 1.2208159, 0.0], [0.003879844, 0.025751393, 0.021729891, 0.007529491, 0.001003017, 0.004054624, 0.100584733, 0.073141924, 0.938087063, 1.05497038, 1.7864841, 1.0], [0.014918967, 0.031267855, 0.034979919, 0.010726879, 0.001321259, 0.005626939, 0.078789883, 0.077416618, 2.774843606, 225.547607, 1.3832594, 1.0]]

train= [[0.002496548, 0.026111181, 0.011910095, 0.009736859, 0.001729663, 0.002754265, 0.05865994, 0.064946526, 2.54075625, 1.52564947, 1.483437, 0.0], [0.009658278, 0.044048513, 0.046141482, 0.015895913, 0.001439365, 0.01812848, 0.071444555, 0.049343779, 4.87998, 122.469535, 0.9827586, 0.0], [0.015679465, 0.026248221, 0.0339069, 0.004336665, 0.001876584, 0.005351668, 0.073793527, 0.066277378, 4.382319375, 383.439858, 1.13126885, 1.0], [0.013847252, 0.046357879, 0.10316788, 0.008246474, 0.003585379, 0.025295607, 0.075555774, 0.022857372, 4.9923316, 307.021281, 1.095898081, 1.0], [0.001772955, 0.010131464, 0.016405572, 0.013960313, 0.000836, 0.01277744, 0.105497945, 0.043079874, 1.178266625, 165.33782, 1.500024994, 1.0], [0.005246101, 0.004857042, 0.020230352, 0.01088776, 0.002572833, 0.004118311, 0.091044586, 0.031450678, 0.913975525, 427.760421, 1.576830419, 0.0], [0.002717146, 0.015329449, 0.002423354, 0.014682793, 0.002994717, 0.015394807, 0.078249752, 0.024006907, 0.6880553, 319.605104, 1.118505119, 0.0], [0.012698695, 0.021355793, 0.072214007, 0.007047494, 0.001403669, 0.0108757, 0.058110275, 0.064957706, 4.8762, 140.372895, 0.961786925, 1.0], [0.003888609, 0.015528014, 0.004352258, 0.004732261, 0.001262802, 0.009842538, 0.087082848, 0.035289413, 1.265236875, 0.18187569, 1.365374325, 0.0], [0.003879844, 0.025751393, 0.021729891, 0.007529491, 0.001003017, 0.004054624, 0.100584733, 0.073141924, 0.938087063, 1.05497038, 1.7864841, 1.0], [0.018495903, 0.047650746, 0.079400389, 0.01486462, 0.001834132, 0.021601872, 0.045959983, 0.06244904, 4.653770625, 6.48890545, 0.95726215, 1.0], [0.012544017, 0.024168858, 0.071149582, 0.006798326, 0.001925273, 0.002040495, 0.068574103, 0.043791487, 5.162535, 0.24820851, 1.05609375, 1.0], [0.004507853, 0.029625884, 0.017859016, 0.008002997, 0.000823, 0.006942341, 0.031777812, 0.022512715, 2.25784125, 0.29412709, 1.4251727, 0.0], [0.008143615, 0.028296878, 0.057176319, 0.010163658, 0.003586574, 0.00297937, 0.112439515, 0.075589468, 3.22502525, 0.44112808, 1.323222081, 1.0], [0.006375889, 0.026055551, 0.025916628, 0.009596814, 0.001646478, 0.008975898, 0.0822643, 0.041019338, 3.595606875, 88.4619061, 1.34793235, 0.0], [0.003905008, 0.01314312, 0.012438961, 0.008040804, 0.0010348, 0.007813457, 0.045468901, 0.06420707, 0.746921838, 0.18277908, 1.281789775, 0.0], [0.025366304, 0.032931208, 0.075880419, 0.015131476, 0.001314247, 0.016471599, 0.080644787, 0.075232256, 5.981239125, 7.63810923, 1.1475068, 1.0], [0.010830327, 0.047189917, 0.058882895, 0.007453879, 0.001609156, 0.010666196, 0.074015279, 0.049940164, 4.250931425, 0.30750907, 1.225334863, 1.0], [0.003159761, 0.028819715, 0.065555568, 0.005827696, 0.00135672, 0.007781965, 0.086829162, 0.056128904, 2.991524438, 362.066506, 1.344847113, 1.0], [0.006247339, 0.03949495, 0.072638375, 0.007755863, 0.000872, 0.015881048, 0.080506805, 0.042014513, 5.109596738, 54.8590122, 1.30794875, 1.0], [0.004244512, 0.015186703, 0.025991443, 0.005392035, 0.001105422, 0.015383122, 0.05083485, 0.040412569, 1.457544375, 90.7844655, 1.29693945, 0.0], [0.011056065, 0.030856573, 0.1042295, 0.01385296, 0.001334802, 0.02532625, 0.121378067, 0.050051767, 4.541707788, 62.5029945, 1.348461731, 1.0], [0.002782708, 0.012817818, 0.024933786, 0.006036266, 0.003233679, 0.013484292, 0.152302686, 0.051543768, 1.957685625, 134.499808, 1.10453325, 0.0], [0.002411261, 0.003158467, 0.010357474, 0.004387233, 0.001302408, 0.005796589, 0.038178549, 0.030051455, 2.094474375, 0.20572824, 1.423539275, 0.0], [0.003580102, 0.002330291, 0.001033174, 0.004338696, 0.000812, 0.006257419, 0.033695406, 0.064057755, 1.15677665, 0.59365994, 1.039666875, 1.0], [0.00490422, 0.022381236, 0.055663848, 0.005140414, 0.00259488, 0.004791889, 0.051816759, 0.066364302, 3.23071875, 426.691104, 1.25097825, 1.0], [0.002047206, 0.006492884, 0.000843, 0.005891372, 0.001476854, 0.021371367, 0.117920073, 0.037303343, 1.0484775, 163.082157, 1.3628397, 0.0], [0.002433578, 0.015074415, 0.00607589, 0.0042075, 0.00079, 0.006365995, 0.053147445, 0.049432499, 1.175225625, 0.92128696, 1.40005175, 1.0], [0.00276402, 0.015408972, 0.016656678, 0.004051677, 0.002122357, 0.004894935, 0.101491873, 0.036885644, 1.512826875, 161.278265, 1.214798825, 0.0], [0.00148164, 0.002052475, 0.00532672, 0.006305421, 0.00146096, 0.012540001, 0.046628504, 0.029981513, 0.016891875, 0.2460671, 1.44113145, 0.0], [0.003913671, 0.016167185, 0.054886476, 0.006200322, 0.001423739, 0.013063711, 0.060180973, 0.032180962, 2.283001875, 442.611716, 1.12330825, 0.0], [0.004805638, 0.029068073, 0.062996926, 0.008703832, 0.002726953, 0.01773026, 0.126864028, 0.05115031, 4.3531425, 264.681996, 1.21117525, 0.0], [0.004579577, 0.029076792, 0.06242935, 0.00456641, 0.002315564, 0.004686696, 0.073614256, 0.031933323, 4.104279813, 0.46201363, 1.138855631, 0.0], [0.001335102, 0.017860071, 0.059201408, 0.004368551, 0.00229303, 0.010830434, 0.089144502, 0.064296106, 2.350215, 228.448041, 1.170226975, 1.0], [0.018362064, 0.035529399, 0.065544087, 0.014733668, 0.003234117, 0.007112914, 0.071474893, 0.055423878, 4.646900138, 94.1046379, 1.246207719, 1.0], [0.005077988, 0.037351174, 0.054645875, 0.011886495, 0.003301288, 0.010511675, 0.092876808, 0.086800629, 2.403420588, 0.45511342, 1.430657744, 1.0], [0.012485357, 0.031562332, 0.097794633, 0.010774682, 0.001680763, 0.013615436, 0.068717309, 0.035279988, 5.418748125, 383.904371, 1.011878625, 1.0], [0.002203241, 0.025094793, 0.109128633, 0.005600489, 0.001536862, 0.007423774, 0.083334837, 0.053699284, 0.5877295, 342.181965, 1.547223975, 0.0], [0.001936268, 0.024225923, 0.026739534, 0.007771532, 0.001340408, 0.008958982, 0.077192293, 0.056346568, 2.619514125, 365.841696, 1.384545238, 1.0], [0.010791496, 0.019839119, 0.038885214, 0.014584363, 0.001444004, 0.016216201, 0.075951453, 0.029312226, 1.816171875, 129.829985, 1.13945475, 1.0], [0.004846274, 0.017326196, 0.023798308, 0.003568105, 0.002107824, 0.009395815, 0.103415675, 0.047095842, 1.8612682, 0.30401637, 1.517763788, 0.0], [0.003491841, 0.025958229, 0.047639005, 0.009707966, 0.000586, 0.005756547, 0.114840348, 0.065140058, 1.805597563, 685.866383, 1.5112422, 0.0], [0.002667804, 0.024963485, 0.003411585, 0.002697463, 0.00134503, 0.002444648, 0.043871608, 0.043619125, 2.005175275, 0.53429395, 0.906624875, 0.0], [0.005171897, 0.016716162, 0.050732286, 0.005239421, 0.003778619, 0.01338227, 0.055457425, 0.05130062, 2.243292375, 205.671818, 1.347625981, 1.0], [0.006088868, 0.024605179, 0.034353304, 0.006264766, 0.002396565, 0.014193613, 0.072924125, 0.046017056, 5.3676, 226.321994, 1.39960115, 1.0], [0.004695509, 0.012458259, 0.013063332, 0.003760104, 0.000673, 0.004357925, 0.075829486, 0.073188126, 3.272180625, 0.24899647, 1.332931125, 0.0], [0.003462913, 0.017382632, 0.045552262, 0.012354361, 0.00126282, 0.023438327, 0.113559227, 0.068740362, 6.44301, 154.094292, 1.2287862, 1.0], [0.002387424, 0.009798006, 0.001361011, 0.006602096, 0.003201493, 0.002409501, 0.057623293, 0.040768095, 0.879535325, 0.26478846, 1.420963044, 1.0], [0.001918448, 0.004685046, 0.000923, 0.003483425, 0.00118119, 0.010057143, 0.086935954, 0.054531317, 1.519767413, 0.09471279, 1.450882894, 0.0], [0.002275345, 0.006337265, 0.009560492, 0.00170988, 0.001395431, 0.006445264, 0.066468945, 0.044726627, 2.751659675, 0.20151658, 1.468099344, 0.0], [0.001027015, 0.004327273, 0.055436012, 0.003996437, 0.000834, 0.015224133, 0.058852546, 0.072558841, 1.217986875, 0.34463376, 1.450800575, 0.0], [0.001484442, 0.022273348, 0.002498394, 0.00232776, 0.00130086, 0.013221145, 0.009662196, 0.084226071, 2.288435625, 122.570778, 1.35439095, 0.0], [0.018373273, 0.009472021, 0.010416983, 0.006187524, 0.001318141, 0.007285993, 0.047475067, 0.043614741, 1.8408301, 664.699666, 0.9546095, 1.0], [0.014301047, 0.014867698, 0.070355599, 0.005494148, 0.00211863, 0.00418366, 0.092764432, 0.053693913, 3.537489375, 0.35893475, 0.969221825, 1.0]]
test= [[0.003007961, 0.014542253, 0.040856032, 0.006707435, 0.002338206, 0.006255884, 0.110437465, 0.051972894, 2.741326875, 0.5154227, 1.139435975, 1.0], [0.014918967, 0.031267855, 0.034979919, 0.010726879, 0.001321259, 0.005626939, 0.078789883, 0.077416618, 2.774843606, 225.547607, 1.3832594, 1.0], [0.007718764, 0.033093677, 0.013571797, 0.003327451, 0.003172059, 0.003209362, 0.114813513, 0.045297815, 3.399519375, 397.73006, 1.255803425, 0.0], [0.002141141, 0.011779696, 0.006621055, 0.007364469, 0.002086719, 0.002581922, 0.076116133, 0.031225794, 1.765378125, 2.85214144, 1.308748925, 0.0], [0.009679353, 0.027310452, 0.074141279, 0.011638767, 0.001233983, 0.018731072, 0.098598278, 0.03711616, 4.757520563, 498.862254, 1.240441044, 1.0], [0.011439924, 0.036653661, 0.056921621, 0.010087572, 0.000888, 0.016030575, 0.049651978, 0.048178214, 4.712879325, 342.148288, 1.405919544, 0.0], [0.000942, 0.011775368, 0.003494036, 0.002667731, 0.000628, 0.003621085, 0.072370921, 0.047820188, 1.141673913, 0.39563572, 1.457088338, 0.0], [0.00310326, 0.03554397, 0.015933322, 0.010052285, 0.002781602, 0.010697005, 0.099576897, 0.028848724, 2.796675263, 350.160648, 1.367140744, 0.0], [0.002451852, 0.003578947, 0.002372209, 0.005411928, 0.000518, 0.010916731, 0.073079863, 0.041385336, 0.938776213, 0.27624565, 1.59611535, 0.0], [0.004137337, 0.015541195, 0.01247903, 0.014257981, 0.001757275, 0.012331144, 0.021788289, 0.044030356, 1.793604438, 198.699549, 1.224143919, 0.0], [0.006662255, 0.020877754, 0.080845054, 0.005459164, 0.001333669, 0.007161183, 0.073461067, 0.048127861, 6.3707175, 103.063748, 1.1657022, 0.0], [0.005835073, 0.026494709, 0.047253097, 0.01447612, 0.001070202, 0.009017881, 0.072444246, 0.039611277, 3.722349225, 438.818786, 1.186075506, 1.0], [0.014945797, 0.021133117, 0.020398304, 0.012144783, 0.002271275, 0.00834414, 0.095721454, 0.046947199, 3.075472425, 435.066375, 1.444761025, 1.0], [0.018919939, 0.03378586, 0.046105767, 0.011979019, 0.000932, 0.013018569, 0.11317248, 0.076092812, 5.091459825, 198.935871, 1.2208159, 0.0], [0.004985401, 0.023968354, 0.056230553, 0.015215951, 0.001821507, 0.015913722, 0.046876656, 0.036381456, 4.130671488, 0.82871173, 1.271698094, 1.0]]

n_folds = 12
l_rate = 0.1
n_epoch = 500
n_hidden = 12

back_propagation(train, test, l_rate, n_epoch, n_hidden)
scores = evaluate_algorithm(dataset, back_propagation, n_folds, l_rate, n_epoch, n_hidden)
print('Scores: %s' % scores)
print('Mean Accuracy: %.3f%%' % (sum(scores)/float(len(scores))))
